"""
Django settings for dit_helpdesk project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import environ
import os
import sentry_sdk
import sys

from sentry_sdk.integrations.django import DjangoIntegration

BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

env.read_env()

VCAP_SERVICES = env.json("VCAP_SERVICES", {})

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

SECRET_KEY = env.str("DJANGO_SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "elasticapm.contrib.django",
    "formtools",
    "core",
    "cookies",
    "contact",
    "django_extensions",
    "healthcheck",
    "privacy_terms_and_conditions",
    "directory_forms_api_client",
    "accessibility",
    "disclaimer",
    "webpack_loader",
]

MIDDLEWARE = [
    "healthcheck.middleware.HealthCheckMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.NoIndexMiddleware",
    "core.middleware.NoCacheMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": False,
        "OPTIONS": {
            "loaders": [
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.ga_gtm_processor",
            ],
        },
    }
]

WSGI_APPLICATION = "config.wsgi.application"

DATABASES = {}

DATA_UPLOAD_MAX_NUMBER_FIELDS = 85000  # default is 1000

if "redis" in VCAP_SERVICES:
    REDIS_URL = VCAP_SERVICES["redis"][0]["credentials"]["uri"]
else:
    REDIS_URL = env.str("REDIS_URL")

CACHES = {
    "default": {"BACKEND": "django_redis.cache.RedisCache", "LOCATION": REDIS_URL}
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-gb"

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_L10N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/


STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "assets")]

STATIC_ROOT = "static_root"

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_STORAGE = (
    "whitenoise.storage.CompressedStaticFilesStorage"  # compression without caching
)

# Secure cookie settings.
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SAMESITE = "Strict"
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True

LOG_LEVEL = env.str("LOGLEVEL")

LOGGING = {
    "version": 1,
    "handlers": {"console": {"class": "logging.StreamHandler", "stream": sys.stdout}},
    "root": {"handlers": ["console"], "level": LOG_LEVEL},
}

ELASTIC_APM = {
    "SERVICE_NAME": env.str("APM_SERVICE_NAME"),
    "SECRET_TOKEN": env.str("APM_SECRET_TOKEN"),
    "SERVER_URL": env.str("APM_SERVER_URL"),
    "ENVIRONMENT": env.str("APM_ENVIRONMENT"),
    "SERVER_TIMEOUT": env.str("APM_TIMEOUT"),
    "DEBUG": env.str("APM_DEBUG"),
}

sentry_sdk.init(
    env.str("SENTRY_DSN"),
    environment=env.str("SENTRY_ENVIRONMENT"),
    integrations=[DjangoIntegration()],
)

DIRECTORY_FORMS_API_BASE_URL = env.str("DIRECTORY_FORMS_API_BASE_URL")
DIRECTORY_FORMS_API_API_KEY = env.str("DIRECTORY_FORMS_API_API_KEY")
DIRECTORY_FORMS_API_SENDER_ID = env.str("DIRECTORY_FORMS_API_SENDER_ID")
DIRECTORY_CLIENT_CORE_CACHE_EXPIRE_SECONDS = env.int(
    "DIRECTORY_CLIENT_CORE_CACHE_EXPIRE_SECONDS"
)
DIRECTORY_CLIENT_CORE_CACHE_LOG_THROTTLING_SECONDS = env.int(
    "DIRECTORY_CLIENT_CORE_CACHE_LOG_THROTTLING_SECONDS"
)
DIRECTORY_FORMS_API_DEFAULT_TIMEOUT = 10

HMRC_TAX_FORM_URL = env.str("HMRC_TAX_FORM_URL")
HMRC_TARIFF_CLASSIFICATION_SERVICE_URL = env.str(
    "HMRC_TARIFF_CLASSIFICATION_SERVICE_URL"
)

FORM_URL = env.str("FORM_URL")

IEE_GA_GTM = env.str("IEE_GA_GTM")

EU_EXIT_DIT_EMAIL = env.str("EU_EXIT_DIT_EMAIL")
EU_EXIT_DIT_FULLNAME = env.str("EU_EXIT_DIT_FULLNAME")

# Zendesk service names
ZENDESK_EU_EXIT_SERVICE_NAME = env.str("ZENDESK_EU_EXIT_SERVICE_NAME")
ZENDESK_CHEG_SERVICE_NAME = env.str("ZENDESK_CHEG_SERVICE_NAME")
ZENDESK_SUBDOMAIN = env.str("ZENDESK_SUBDOMAIN", "dit")
EU_EXIT_EMAIL = env.str("EU_EXIT_EMAIL")
EU_EXIT_FULLNAME = env.str("EU_EXIT_FULLNAME")

FEEDBACK_EMAIL = env.str("FEEDBACK_EMAIL")
FEEDBACK_FULLNAME = env.str("FEEDBACK_FULLNAME")
BASE_SITE_URL = env.str("BASE_SITE_URL")

SECURE_BROWSER_XSS_FILTER = env.bool("SECURE_BROWSER_XSS_FILTER", True)
SECURE_CONTENT_TYPE_NOSNIFF = env.bool("SECURE_CONTENT_TYPE_NOSNIFF", True)
